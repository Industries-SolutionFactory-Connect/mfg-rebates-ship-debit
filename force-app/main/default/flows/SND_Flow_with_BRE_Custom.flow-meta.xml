<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>BRESND</name>
        <label>BRESND</label>
        <locationX>600</locationX>
        <locationY>2711</locationY>
        <actionName>RebateClaimValidationRules</actionName>
        <actionType>runExpressionSet</actionType>
        <connector>
            <targetReference>Is_BRE_Successful</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>Program_StartDate</name>
            <value>
                <elementReference>GetRebateProgram.StartDate</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>PricingTerm_SalePricePerUnit</name>
            <value>
                <elementReference>SalePricePerUnit</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>PricingTermBenefit_Discount</name>
            <value>
                <elementReference>Discount</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Claim_Quantity</name>
            <value>
                <elementReference>$Record.Quantity</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Claim_ShipToAccount</name>
            <value>
                <elementReference>$Record.ParticipatingAccountId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Program_EndDate</name>
            <value>
                <elementReference>GetRebateProgram.EndDate</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>PricingTerm_Quantity</name>
            <value>
                <elementReference>ProductQuantity</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Claim_SalePricePerUnit</name>
            <value>
                <elementReference>$Record.SalePricePerUnit</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>ProgramMember_ShipToAccount</name>
            <value>
                <elementReference>GetRebateProgramMember.ShipToAccountId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>ClaimAggregate_Quantity</name>
            <value>
                <elementReference>ClaimAggregate.TotalClaimedQuantity</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>ClaimAggregate_Amount</name>
            <value>
                <elementReference>ClaimAggregate.TotalClaimedAmount</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Program_GraceDays</name>
            <value>
                <elementReference>GetRebateProgram.GracePeriodDayCount</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>PricingTermBenefit_ReferenceUnitPrice</name>
            <value>
                <elementReference>ReferencePricePerUnit</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>Claim_ClaimDate</name>
            <value>
                <elementReference>$Record.ClaimDate</elementReference>
            </value>
        </inputParameters>
        <nameSegment>RebateClaimValidationRules</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
        <versionSegment>1</versionSegment>
    </actionCalls>
    <actionCalls>
        <description>Calls an action to get details about the created or updated rebate claim that triggered the flow. Details include the rebate claim ID, the rebate member claim aggregate ID, the rebate partner special pricing term benefit ID, the rebate partner special pricing term ID, the rebate program ID, the rebate program member ID, and the transaction journal ID.</description>
        <name>GetRebateClaimDetails</name>
        <label>Get Rebate Claim Details</label>
        <locationX>791</locationX>
        <locationY>323</locationY>
        <actionName>fetchRebateClaimDetails</actionName>
        <actionType>fetchRebateClaimDetails</actionType>
        <connector>
            <targetReference>WereAllRequiredIdsReturned</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>rebateClaimId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <nameSegment>fetchRebateClaimDetails</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
        <versionSegment>1</versionSegment>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to the user running the flow, using the value of the EmailSubjectClaimMissingRequiredIds constant as a subject and EmailBodyClaimMissingRequiredIdsTextTemplate as the body.</description>
        <name>SendEmailClaimMissingRequiredIds</name>
        <label>Send Email</label>
        <locationX>50</locationX>
        <locationY>647</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>SendEmailClaimMissingRequiredIds</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailBodyClaimMissingRequiredIdsTextTemplate</elementReference>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <versionSegment>1</versionSegment>
    </actionCalls>
    <apiVersion>58.0</apiVersion>
    <constants>
        <description>Stores the rebate claim processing status message for a rebate claim that&apos;s claim date isn&apos;t within the start date and end date of the associated rebate program.</description>
        <name>ClaimInactiveProgramOrMemberProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>The claim date of the rebate claim isn’t within the start and end dates of the rebate program.</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the rebate claim processing status message for a claim that requires more product quantity than the remaining product quantity.</description>
        <name>ClaimInsufficientQuanitityProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>The required rebate claim product quantity is more than the remaining product quantity.</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the rebate claim processing status message for a rebate claim that&apos;s claim date isn&apos;t within the start date and end date of the associated rebate program.</description>
        <name>ClaimInvalidClaimDateProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>The claim date of the rebate claim isn’t within the start and end dates of the rebate program.</stringValue>
        </value>
    </constants>
    <constants>
        <description>We couldn&apos;t find this rebate claim or it was missing one or more of the following associated IDs: rebate program ID, rebate partner special pricing term ID, or rebate program member ID.</description>
        <name>ClaimMissingRequiredIdsProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Stores the rebate claim processing status message for a claim that wasn&apos;t found or that&apos;s missing required IDs. To customize the processing status message, change the value of this constant.</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the rebate claim processing status message for a claim with no associated rebate partner special pricing term. To customize the processing status message, change the value of this constant.</description>
        <name>ClaimNoSpecialPricingTermProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>The rebate claim has no associated rebate partner special pricing term.</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the rebate claim processing status message for a claim with a different product ID than the product ID associated with the transaction journal.</description>
        <name>ClaimProductIdsDifferentProcessingStatusMessage</name>
        <dataType>String</dataType>
        <value>
            <stringValue>The rebate claim product isn&apos;t the same as the product associated with the transaction journal.</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Determines whether the product ID associated with the rebate claim that triggered the flow and the product ID associated with Transaction Journal from GetTransactionJournal are different.</description>
        <name>AreClaimandTransactionJournalIDsDifferent</name>
        <label>Are Claim and Transaction Journal IDs Different?</label>
        <locationX>446</locationX>
        <locationY>2219</locationY>
        <defaultConnector>
            <targetReference>BRESND</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasDifferentClaimAndTransactionJournalIds</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ProductId</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>GetTransactionJournal.ProductId</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>UpdateTriggeringRecordProductIdsDifferent</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the rebate claim has an associated rebate member claim aggregate ID.</description>
        <name>HaveRebateMemberClaimAggregateID</name>
        <label>Have Rebate Member Claim Aggregate ID?</label>
        <locationX>798</locationX>
        <locationY>1487</locationY>
        <defaultConnector>
            <targetReference>CreateRebateMemberClaimAggregate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasClaimAggregateDefined</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebateMemberClaimAggregateId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetRebateMemberClaimAggregate</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether GetRebateProgram and GetRebateProgramMember each returned an active record.</description>
        <name>HaveRebateProgramandProgramMember</name>
        <label>Have Rebate Program and Program Member?</label>
        <locationX>1532</locationX>
        <locationY>755</locationY>
        <defaultConnector>
            <targetReference>UpdateTriggeringRecordInactiveProgramOrMember</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>IsRebateProgramAndProgramMemberActive</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateProgram</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetRebateProgramMember</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>IsClaimDateWithinProgramPeriod</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the rebate partner special pricing term associated with the rebate claim has a defined sale price per unit that&apos;s greater than zero.</description>
        <name>HaveSalesPricePerUnit</name>
        <label>Have Sales Price Per Unit?</label>
        <locationX>1029</locationX>
        <locationY>1379</locationY>
        <defaultConnector>
            <targetReference>UpdateTriggeringRecordNoSpecialPricingTerm</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasSpecialPricingTermDefined</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>SalePricePerUnit</leftValueReference>
                <operator>GreaterThan</operator>
                <rightValue>
                    <numberValue>0.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>HaveRebateMemberClaimAggregateID</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether a rebate partner special pricing term benefit is associated with the rebate partner special pricing term.</description>
        <name>HaveSpecialPricingTermBenefit</name>
        <label>Have Special Pricing Term Benefit?</label>
        <locationX>1029</locationX>
        <locationY>971</locationY>
        <defaultConnector>
            <targetReference>GetSpecialPricingTerm</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasSpecialPricingTermBenefitDefined</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebatePartnerSpecialPricingTermBenefitId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetRebatePartnerSpecialPricingTermBenefit</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the quantity of the record claim is less than or equal to the remaining product quantity.</description>
        <name>HaveSufficientProductQuantity</name>
        <label>Have Sufficient Product Quantity?</label>
        <locationX>798</locationX>
        <locationY>1895</locationY>
        <defaultConnector>
            <targetReference>UpdateTriggeringRecordInsufficientQuantity</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasSufficientRemainingProductQuantity</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Quantity</leftValueReference>
                <operator>LessThanOrEqualTo</operator>
                <rightValue>
                    <elementReference>RemainingProductQuantity</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>HaveTransactionJournalID</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the rebate claim has an associated transaction journal ID.</description>
        <name>HaveTransactionJournalID</name>
        <label>Have Transaction Journal ID?</label>
        <locationX>600</locationX>
        <locationY>2003</locationY>
        <defaultConnector>
            <targetReference>BRESND</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasTransactionJournalId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.transactionJournalId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetTransactionJournal</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_BRE_Successful</name>
        <label>Is BRE Successful</label>
        <locationX>600</locationX>
        <locationY>2819</locationY>
        <defaultConnector>
            <targetReference>Update_Triggering_Record</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Yes</defaultConnectorLabel>
        <rules>
            <name>BRESuccessful</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>BRESND.Claim_Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>System Failed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Update_Triggering_Record_BRE_Fail</targetReference>
            </connector>
            <label>No</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the claim date of the rebate claim is within the start and end dates of the rebate program, including the grace period allowed by the associated rebate program.</description>
        <name>IsClaimDateWithinProgramPeriod</name>
        <label>Is Claim Date Within Program Period?</label>
        <locationX>1276</locationX>
        <locationY>863</locationY>
        <defaultConnector>
            <targetReference>UpdateTriggeringRecordInvalidClaimDate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>IsEligibleClaimDate</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateProgram.StartDate</leftValueReference>
                <operator>LessThanOrEqualTo</operator>
                <rightValue>
                    <elementReference>$Record.ClaimDate</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetRebateProgram.EndDate</leftValueReference>
                <operator>GreaterThanOrEqualTo</operator>
                <rightValue>
                    <elementReference>ClaimDateWithGracePeriodFormula</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>HaveSpecialPricingTermBenefit</targetReference>
            </connector>
            <label>YES</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the four IDs (rebate claim ID, rebate program ID, rebate partner special pricing term ID, and rebate program member ID) required for the flow were returned by GetRebateClaimDetails.</description>
        <name>WereAllRequiredIdsReturned</name>
        <label>Were All Required IDs Returned?</label>
        <locationX>791</locationX>
        <locationY>431</locationY>
        <defaultConnector>
            <targetReference>GetRebateProgram</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Yes (Default)</defaultConnectorLabel>
        <rules>
            <name>IsClaimMissingRequiredIds</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebateClaimId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebateProgramId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebatePartnerSpecialPricingTermId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetRebateClaimDetails.rebateProgramMemberId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>UpdateTriggeringRecordMissingRequiredIds</targetReference>
            </connector>
            <label>No</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <description>Calculates the new claim aggregate total claimed quantity, adding the rebate claim quantity to the current claim aggregate total claimed quantity.</description>
        <name>ClaimAggregateUpdatedTotalClaimedAmountFormula</name>
        <dataType>Currency</dataType>
        <expression>{!ClaimAggregate.TotalClaimedAmount} + {!$Record.CalculatedAmount}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <description>Updates the claim aggregate record, setting Total Claimed Amount to ClaimAggregateUpdatedTotalClaimedAmountFormula and Total Claimed Quantity to ClaimAggregateUpdatedTotalClaimedQuantityFormula.</description>
        <name>ClaimAggregateUpdatedTotalClaimedQuantityFormula</name>
        <dataType>Number</dataType>
        <expression>{!ClaimAggregate.TotalClaimedQuantity} + {!$Record.Quantity}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <description>Calculates the total claim amount, applying relevant special pricing terms or special pricing term benefits associated with the rebate claim.</description>
        <name>ClaimCalculatedAmountFormula</name>
        <dataType>Currency</dataType>
        <expression>{!$Record.Quantity}*
IF(ISNULL({!Discount}), {!SalePricePerUnit} - {!ReferencePricePerUnit}, IF({!IsDiscountByPercent}, {!SalePricePerUnit} * {!Discount} / 100,  {!Discount}))</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <description>Calculates the date of the rebate claim less the number of grace days allowed by the associated rebate program.</description>
        <name>ClaimDateWithGracePeriodFormula</name>
        <dataType>Date</dataType>
        <expression>DATEVALUE({!$Record.ClaimDate} - {!GetRebateProgram.GracePeriodDayCount})</expression>
    </formulas>
    <formulas>
        <description>Calculates the remaining product quantity associated with the rebate claim by subtracting the total claimed quantity of the claim aggregate from the product quantity associated with the rebate partner special pricing term.</description>
        <name>RemainingProductQuantity</name>
        <dataType>Number</dataType>
        <expression>{!ProductQuantity}- {!ClaimAggregate.TotalClaimedQuantity}</expression>
        <scale>2</scale>
    </formulas>
    <interviewLabel>SND Flow with BRE Custom {!$Flow.CurrentDateTime}</interviewLabel>
    <label>SND Flow with BRE Custom</label>
    <overriddenFlow>industries_mfg_rebates__Ship_And_Debit</overriddenFlow>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <description>Creates a rebate member claim aggregate record with the following field values: ProductId set to the Product ID of the record that triggered the flow, RebateProgramMemberId set to the rebate program member ID returned by GetRebateClaimDetails, and both TotalClaimedQuantity and TotalClaimedAmount set to 0. Stores the ID of the new record in the Rebate Member Claim AggregateId from CreateRebateMemberClaimAggregate variable.</description>
        <name>CreateRebateMemberClaimAggregate</name>
        <label>Create Rebate Member Claim Aggregate</label>
        <locationX>930</locationX>
        <locationY>1595</locationY>
        <connector>
            <targetReference>GetNewRebateMemberClaimAggregate</targetReference>
        </connector>
        <inputAssignments>
            <field>ProductId</field>
            <value>
                <elementReference>$Record.ProductId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RebateProgramMemberId</field>
            <value>
                <elementReference>GetRebateClaimDetails.rebateProgramMemberId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TotalClaimedAmount</field>
            <value>
                <numberValue>0.0</numberValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TotalClaimedQuantity</field>
            <value>
                <numberValue>0.0</numberValue>
            </value>
        </inputAssignments>
        <object>RebateMemberClaimAggregate</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordLookups>
        <description>Gets the active rebate partner special pricing term benefit record with an ID that matches rebate partner special pricing term benefit ID returned by GetRebateClaimDetails. Stores the ProductQuantity and SalePricePerUnit in the ProductQuantity and SalePricePerUnit variables respectively.</description>
        <name>GetActiveRebatePartnerSpecialPricingTermBenefit</name>
        <label>Get Active Rebate Partner Special Pricing Term Benefit</label>
        <locationX>897</locationX>
        <locationY>1187</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveSalesPricePerUnit</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebatePartnerSpecialPricingTermId</elementReference>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Active</stringValue>
            </value>
        </filters>
        <object>RebatePartnerSpecialPrcTrm</object>
        <outputAssignments>
            <assignToReference>ProductQuantity</assignToReference>
            <field>ProductQuantity</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>SalePricePerUnit</assignToReference>
            <field>SalePricePerUnit</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>Gets the new rebate member claim aggregate record with a RebateProgramMemberId that matches the rebate program member ID returned by GetRebateClaimDetails and a ProductId that matches the products ID of the record that triggered the flow. Stores the ID, TotalClaimedQuantity, and Total Claimed Amount fields of the result in the ClaimAggregate record variable.</description>
        <name>GetNewRebateMemberClaimAggregate</name>
        <label>Get New Rebate Member Claim Aggregate</label>
        <locationX>930</locationX>
        <locationY>1703</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveSufficientProductQuantity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>CreateRebateMemberClaimAggregate</elementReference>
            </value>
        </filters>
        <object>RebateMemberClaimAggregate</object>
        <outputReference>ClaimAggregate</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>TotalClaimedQuantity</queriedFields>
        <queriedFields>TotalClaimedAmount</queriedFields>
    </recordLookups>
    <recordLookups>
        <description>Gets the rebate member claim aggregate record with an ID that matches the rebate member claim aggregate ID returned by GetRebateClaimDetails. Stores the ID, TotalClaimedQuantity, and Total Claimed Amount fields of the result in the ClaimAggregate record variable.</description>
        <name>GetRebateMemberClaimAggregate</name>
        <label>Get Rebate Member Claim Aggregate</label>
        <locationX>666</locationX>
        <locationY>1595</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveSufficientProductQuantity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebateMemberClaimAggregateId</elementReference>
            </value>
        </filters>
        <object>RebateMemberClaimAggregate</object>
        <outputReference>ClaimAggregate</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>TotalClaimedQuantity</queriedFields>
        <queriedFields>TotalClaimedAmount</queriedFields>
    </recordLookups>
    <recordLookups>
        <description>Gets the rebate partner special pricing term benefit record with an ID that matches rebate partner special pricing term benefit ID returned by GetRebateClaimDetails. Stores the Discount, IsDiscountByPercent, and ReferencePricePerUnit in the Discount, IsDiscountByPercent, and ReferencePricePerUnit variables respectively.</description>
        <name>GetRebatePartnerSpecialPricingTermBenefit</name>
        <label>Get Rebate Partner Special Pricing Term Benefit</label>
        <locationX>897</locationX>
        <locationY>1079</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetActiveRebatePartnerSpecialPricingTermBenefit</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebatePartnerSpecialPricingTermBenefitId</elementReference>
            </value>
        </filters>
        <object>RebatePtnrSpclPrcTrmBnft</object>
        <outputAssignments>
            <assignToReference>Discount</assignToReference>
            <field>Discount</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>IsDiscountByPercent</assignToReference>
            <field>IsDiscountByPercent</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>ReferencePricePerUnit</assignToReference>
            <field>ReferencePricePerUnit</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>Gets the active rebate program record with an ID that matches the ID of the rebate program returned by GetRebateClaimDetails. Stores the ID, GracePeriodDayCount, StartDate, and EndDate fields in the Rebate Program from GetRebateProgram record variable.</description>
        <name>GetRebateProgram</name>
        <label>Get Rebate Program</label>
        <locationX>1532</locationX>
        <locationY>539</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetRebateProgramMember</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebateProgramId</elementReference>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Active</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>RebateProgram</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>GracePeriodDayCount</queriedFields>
        <queriedFields>StartDate</queriedFields>
        <queriedFields>EndDate</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the active rebate program record member with an ID that matches the ID of the rebate program member returned by GetRebateClaimDetails. Stores the ID and ShipToAccountId fields in the Rebate Program Member from GetRebateProgramMember record variable.</description>
        <name>GetRebateProgramMember</name>
        <label>Get Rebate Program Member</label>
        <locationX>1532</locationX>
        <locationY>647</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveRebateProgramandProgramMember</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebateProgramMemberId</elementReference>
            </value>
        </filters>
        <filters>
            <field>MemberStatus</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Active</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>RebateProgramMember</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>ShipToAccountId</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the active rebate partner special pricing term record with an ID that matches the rebate partner special pricing term ID returned by GetRebateClaimDetails. Stores the Discount, IsDiscountPercent, Product Quantity, ReferencePricePerUnit, and SalePricePerUnit fields in the Discount, IsDisountByPercent, ProductQuantity, ReferencePricePerUnit, and SalePricePerUnit variables respectively.</description>
        <name>GetSpecialPricingTerm</name>
        <label>Get Special Pricing Term</label>
        <locationX>1161</locationX>
        <locationY>1079</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveSalesPricePerUnit</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.rebatePartnerSpecialPricingTermId</elementReference>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Active</stringValue>
            </value>
        </filters>
        <object>RebatePartnerSpecialPrcTrm</object>
        <outputAssignments>
            <assignToReference>Discount</assignToReference>
            <field>Discount</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>IsDiscountByPercent</assignToReference>
            <field>IsDiscountByPercent</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>ProductQuantity</assignToReference>
            <field>ProductQuantity</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>ReferencePricePerUnit</assignToReference>
            <field>ReferencePricePerUnit</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>SalePricePerUnit</assignToReference>
            <field>SalePricePerUnit</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>Gets the transaction journal with an ID that matches the transaction journal ID returned by GetRebateClaimDetails and stores the ID, ProductId, ActivityDate, and TransactionAmount fields in the Transaction Journal from GetTransactionJournal record variable.</description>
        <name>GetTransactionJournal</name>
        <label>Get Transaction Journal</label>
        <locationX>446</locationX>
        <locationY>2111</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>AreClaimandTransactionJournalIDsDifferent</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetRebateClaimDetails.transactionJournalId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>TransactionJournal</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>ProductId</queriedFields>
        <queriedFields>ActivityDate</queriedFields>
        <queriedFields>TransactionAmount</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_Claim_Aggregate</name>
        <label>Update Claim Aggregate</label>
        <locationX>732</locationX>
        <locationY>3035</locationY>
        <inputAssignments>
            <field>TotalClaimedAmount</field>
            <value>
                <elementReference>BRESND.ClaimAggregate_Amount</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TotalClaimedQuantity</field>
            <value>
                <elementReference>BRESND.ClaimAggregate_Quantity</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record.RebateMemberClaimAggregate</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>Update_Triggering_Record</name>
        <label>Update Triggering Record</label>
        <locationX>732</locationX>
        <locationY>2927</locationY>
        <connector>
            <targetReference>Update_Claim_Aggregate</targetReference>
        </connector>
        <inputAssignments>
            <field>CalculatedAmount</field>
            <value>
                <elementReference>BRESND.CalculatedPayoutAmount</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <elementReference>BRESND.Claim_Status</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>BRESND.Claim_StatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RebateMemberClaimAggregateId</field>
            <value>
                <elementReference>ClaimAggregate.Id</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>Update_Triggering_Record_BRE_Fail</name>
        <label>Update Triggering Record</label>
        <locationX>468</locationX>
        <locationY>2927</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <elementReference>BRESND.Claim_Status</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>BRESND.Claim_StatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordInactiveProgramOrMember</name>
        <label>Update Triggering Record</label>
        <locationX>1788</locationX>
        <locationY>863</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimInactiveProgramOrMemberProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordInsufficientQuantity</name>
        <label>Update Triggering Record</label>
        <locationX>996</locationX>
        <locationY>2003</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimInsufficientQuanitityProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordInvalidClaimDate</name>
        <label>Update Triggering Record</label>
        <locationX>1524</locationX>
        <locationY>971</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimInvalidClaimDateProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordMissingRequiredIds</name>
        <label>Update Triggering Record</label>
        <locationX>50</locationX>
        <locationY>539</locationY>
        <connector>
            <targetReference>SendEmailClaimMissingRequiredIds</targetReference>
        </connector>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimMissingRequiredIdsProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordNoSpecialPricingTerm</name>
        <label>Update Triggering Record</label>
        <locationX>1260</locationX>
        <locationY>1487</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimNoSpecialPricingTermProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the processing status and processing status message fields of the rebate claim record that triggered the flow.</description>
        <name>UpdateTriggeringRecordProductIdsDifferent</name>
        <label>Update Triggering Record</label>
        <locationX>314</locationX>
        <locationY>2327</locationY>
        <inputAssignments>
            <field>ProcessingStatus</field>
            <value>
                <stringValue>System Failed</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ProcessingStatusMessage</field>
            <value>
                <elementReference>ClaimProductIdsDifferentProcessingStatusMessage</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <start>
        <locationX>665</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>GetRebateClaimDetails</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ProcessingStatus</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>In Review</stringValue>
            </value>
        </filters>
        <filters>
            <field>ClaimType</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>ShipAndDebit</stringValue>
            </value>
        </filters>
        <object>RebateClaim</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Obsolete</status>
    <textTemplates>
        <description>Stores the body of the email to send when a rebate claim wasn&apos;t found or when it&apos;s missing required IDs. To customize the body of the email sent to the user, change the value of this text template.</description>
        <name>EmailBodyClaimMissingRequiredIdsTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; color: rgb(0, 0, 0); background-color: transparent;&quot;&gt;Hello &lt;/span&gt;&lt;span style=&quot;font-size: 10pt; font-family: Roboto, sans-serif; color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;{!$Organization.Name} Admin,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt; font-family: Roboto, sans-serif; color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;We couldn&apos;t either find this rebate claim or it didn&apos;t have one or more of the following required associated IDs: rebate program ID, rebate partner special pricing term ID, or rebate program member ID. Check that the rebate claim exists and that it has these required associated IDs and run the flow again.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt; font-family: Roboto, sans-serif; color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;Thank you,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt; font-family: Roboto, sans-serif; color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;ql-cursor&quot;&gt;﻿&lt;/span&gt;Salesforce Rebate Management&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <variables>
        <description>Stores the rebate member claim aggregate record associated with the rebate claim.</description>
        <name>ClaimAggregate</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>RebateMemberClaimAggregate</objectType>
    </variables>
    <variables>
        <description>Stores a decimal value of the special pricing term&apos;s associated discount amount to be used to calculate the rebate claim amount.</description>
        <name>Discount</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>2</scale>
    </variables>
    <variables>
        <description>Stores a Boolean value that indicates whether to use the associated special pricing term discount to calculate the rebate claim amount.</description>
        <name>IsDiscountByPercent</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the quantity of product to be used to calculate the rebate claim amount.</description>
        <name>ProductQuantity</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>2</scale>
    </variables>
    <variables>
        <description>Stores the reference point per unit to be used to calculate the rebate claim amount.</description>
        <name>ReferencePricePerUnit</name>
        <dataType>Currency</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>2</scale>
    </variables>
    <variables>
        <description>Stores the sale price per unit to be used to calculate the rebate claim amount.</description>
        <name>SalePricePerUnit</name>
        <dataType>Currency</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>2</scale>
    </variables>
</Flow>
